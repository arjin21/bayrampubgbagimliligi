generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  name         String?
  bio          String?
  avatarUrl    String?
  isPrivate    Boolean  @default(false)
  followers    Follow[] @relation("followers")
  following    Follow[] @relation("following")
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  messages     Message[] @relation("senderMessages")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model FollowRequest {
  id          String   @id @default(uuid())
  requester   User     @relation(fields: [requesterId], references: [id])
  requesterId String
  target      User     @relation(fields: [targetId], references: [id])
  targetId    String
  status      FollowRequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Post {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  caption   String?
  mediaUrl  String
  comments  Comment[]
  likes     Like[]
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  sender    User     @relation("senderMessages", fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}